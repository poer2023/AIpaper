---
description: 
globs: **/*
alwaysApply: false
---
# AIpaper Demo 项目规则

## 一、开发流程规范

### 1. 分支管理
- 采用 Git Flow 模型，主分支为 `main`
- 功能开发在 `feature/` 分支进行
- 每个功能分支完成后，通过 PR 合并至 `develop`
- 里程碑达成后，将 `develop` 合并至 `main`

### 2. 提交规范
- 提交信息格式：`[模块] 操作内容 (#issue)`
- 示例：`[富文本] 实现Tiptap编辑器基础配置 (#12)`
- 每次提交应当对应单一功能/修复
- 代码提交前本地通过所有测试

### 3. 代码审查
- 所有PR必须经过至少1人审查
- 审查重点：性能、安全、代码质量、文档完整性
- 审查通过后24小时内合并

### 4. 测试要求
- 单元测试覆盖率≥80%
- E2E测试覆盖全部核心流程
- 每日构建中运行完整测试套件

## 二、技术规范

### 1. 前端规范
- 使用 TypeScript 严格模式
- 命名遵循 camelCase (变量/函数) 和 PascalCase (组件/类)
- 组件设计遵循原子设计模式
- 状态管理：Zustand 或 Context API
- 使用 SWR 或 React Query 处理API请求
- 使用 Shadcn/ui 组件，保持UI一致性

### 2. 后端规范
- FastAPI 路由采用 RESTful 设计
- 数据校验使用 Pydantic 模型
- 异步处理所有I/O操作
- 错误处理统一使用自定义异常类
- 数据库操作使用 SQLAlchemy ORM
- API接口文档使用 Swagger 自动生成

### 3. 数据库规范
- 命名采用蛇形命名法(snake_case)
- 每个表必须包含 created_at, updated_at 字段
- 使用迁移工具(Alembic)管理架构变更
- 禁止直接在生产环境修改数据库结构

### 4. AI模块规范
- 统一使用 LangChain 做模型接口抽象
- 缓存所有可缓存的AI请求
- 敏感数据使用 PII 检测处理
- 用户数据加密存储
- 使用 rate limits 控制API消耗

## 三、性能目标

### 1. 响应时间
- 页面加载时间 < 2秒
- API请求响应(非AI) < 500ms
- AI自动补全P95延迟 ≤ 800ms
- 大纲生成延迟 < 3秒
- PDF检索响应 < 2秒

### 2. 资源使用
- 服务器CPU使用率峰值 < 80%
- 内存使用 < 6GB
- 数据库连接池最大20个

### 3. 可伸缩性
- 支持Docker水平扩展
- FastAPI端接入Prometheus监控

## 四、DevOps规范

### 1. 部署流程
- 使用Docker Compose进行本地开发和生产部署
- 四个容器：前端、后端、数据库、向量库
- CI/CD使用GitHub Actions
- 容器镜像推送至Private Registry

### 2. 监控告警
- 前端错误通过Sentry捕获
- 后端使用日志 + Prometheus监控
- 设置CPU/内存/磁盘空间告警阈值
- 健康检查端点每分钟检测

### 3. 备份策略
- 数据库：每日自动备份 + WAL存档
- 文件存储：每12小时rsync至备份服务器
- 保留最近30天备份

## 五、安全规范

### 1. 认证与授权
- 使用OAuth (GitHub)进行用户认证
- API请求使用JWT验证
- 实施RBAC权限控制
- 敏感操作需二次确认

### 2. 数据保护
- 所有API通信使用HTTPS
- 敏感配置(API密钥等)使用环境变量
- 用户文档存储使用加密
- 实现数据隔离

### 3. 合规要求
- 设置明确的隐私政策
- 用户数据支持导出/删除
- 日志中剔除个人身份信息
- 定期进行安全测试

## 六、团队协作

### 1. 文档规范
- API文档：Swagger自动生成
- 技术文档：Markdown存放于代码库
- 架构决策记录(ADR)记录所有重要决策
- 每周更新项目Wiki进度

### 2. 沟通机制
- 每日站会：15分钟同步进度与障碍
- 每周技术评审：讨论技术挑战
- 里程碑评审：检验交付成果
- 问题使用GitHub Issues追踪

### 3. 知识共享
- 代码评审作为知识分享机制
- 技术难点形成技术文档
- 关键设计决策形成ADR
- 鼓励配对编程解决复杂问题 